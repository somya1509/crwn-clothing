{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const user = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const user = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle);\n}\n;\nexport function* onnEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGNIN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onnEmailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/react/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","signInSuccess","signInFailure","getSnapShotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGNIN_START","onnEmailSignInStart","EMAIL_SIGNIN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,+BAAhE;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAC9C,MAAI;AACJ,UAAMC,OAAO,GAAG,MAAMT,IAAI,CAACI,yBAAD,EAA2BI,QAA3B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMb,GAAG,CAACO,aAAa,CAAC;AAACO,MAAAA,EAAE,EAAGF,YAAY,CAACE,EAAnB;AAAwB,SAAGF,YAAY,CAACG,IAAb;AAA3B,KAAD,CAAd,CAAT;AACH,GAJG,CAIH,OAAMC,KAAN,EAAY;AACT,UAAMhB,GAAG,CAACQ,aAAa,CAACQ,KAAD,CAAd,CAAT;AACF;AACD;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMd,IAAI,CAACe,eAAL,CAAqBd,cAArB,CAAnB;AACA,UAAMM,OAAO,GAAG,MAAMT,IAAI,CAACI,yBAAD,EAA2BY,IAA3B,CAA1B;AACA,UAAMN,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMb,GAAG,CAACO,aAAa,CAAC;AAACO,MAAAA,EAAE,EAAGF,YAAY,CAACE,EAAnB;AAAwB,SAAGF,YAAY,CAACG,IAAb;AAA3B,KAAD,CAAd,CAAT;AACH,GALD,CAKC,OAAMC,KAAN,EAAY;AACT,UAAMhB,GAAG,CAACQ,aAAa,CAACQ,KAAD,CAAd,CAAT;AACF;AACL;AAED,OAAO,UAAUI,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAG;AAACC,IAAAA,KAAD;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA0D;AAC7D,MAAG;AACE,UAAML,IAAI,GAAG,MAAMd,IAAI,CAACoB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAnB;AACA,UAAMZ,OAAO,GAAG,MAAMT,IAAI,CAACI,yBAAD,EAA2BY,IAA3B,CAA1B;AACA,UAAMN,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMb,GAAG,CAACO,aAAa,CAAC;AAACO,MAAAA,EAAE,EAAGF,YAAY,CAACE,EAAnB;AAAwB,SAAGF,YAAY,CAACG,IAAb;AAA3B,KAAD,CAAd,CAAT;AACJ,GALD,CAMA,OAAMC,KAAN,EAAa;AACT,UAAMhB,GAAG,CAACQ,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACnC,QAAM1B,UAAU,CAACI,eAAe,CAACuB,mBAAjB,EAAsCT,gBAAtC,CAAhB;AACH;AAAA;AAED,OAAO,UAAUU,mBAAV,GAAgC;AACnC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,kBAAjB,EAAqCR,eAArC,CAAhB;AACH;AAED,OAAO,UAAUS,SAAV,GAAqB;AACpB,QAAM5B,GAAG,CAAC,CAACC,IAAI,CAACuB,mBAAD,CAAL,EAA4BvB,IAAI,CAACyB,mBAAD,CAAhC,CAAD,CAAT;AACP","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport UserActionTypes from \"./user.types\";\r\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\r\nimport { signInSuccess, signInFailure } from \"./user.actions\";\r\n\r\nexport function* getSnapShotFromUserAuth(userAuth){\r\n    try {\r\n    const userRef = yield call(createUserProfileDocument,userAuth);\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(signInSuccess({id : userSnapshot.id , ...userSnapshot.data()}));\r\n}catch(error){\r\n    yield put(signInFailure(error));\r\n }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const user = yield auth.signInWithPopup(googleProvider);\r\n        const userRef = yield call(createUserProfileDocument,user);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({id : userSnapshot.id , ...userSnapshot.data()}));\r\n    }catch(error){\r\n        yield put(signInFailure(error));\r\n     }\r\n}\r\n\r\nexport function* signInWithEmail({payload : {email , password}}) {\r\n    try{\r\n         const user = yield auth.signInWithEmailAndPassword(email, password);\r\n         const userRef = yield call(createUserProfileDocument,user);\r\n         const userSnapshot = yield userRef.get();\r\n         yield put(signInSuccess({id : userSnapshot.id , ...userSnapshot.data()}));\r\n    }\r\n    catch(error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle);\r\n};\r\n\r\nexport function* onnEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGNIN_START, signInWithEmail )\r\n}\r\n\r\nexport function* userSagas(){\r\n        yield all([call(onGoogleSignInStart), call(onnEmailSignInStart)])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}